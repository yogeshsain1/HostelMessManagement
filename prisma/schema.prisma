// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// Users table for authentication
model User {
  id          String   @id @default(cuid())
  email       String   @unique
  passwordHash String
  fullName    String
  phone       String?
  role        UserRole
  hostelId    String?
  roomNumber  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  hostel         Hostel?         @relation("HostelUsers", fields: [hostelId], references: [id])
  managedHostel  Hostel?         @relation("HostelWarden")
  complaints     Complaint[]
  leaveRequests  LeaveRequest[]
  messAttendance MessAttendance[]
  messFeedback   MessFeedback[]
  notifications  Notification[]
  createdNotifications Notification[] @relation("NotificationCreator")
  approvedLeaves LeaveRequest[]  @relation("ApprovedBy")
  createdEvents  Event[]         @relation("EventCreator")
  preferences    UserPreference?

  @@map("users")
}

// Hostels table
model Hostel {
  id         String   @id @default(cuid())
  name       String
  wardenId   String?  @unique
  totalRooms Int?
  createdAt  DateTime @default(now())

  // Relations
  warden     User?           @relation("HostelWarden", fields: [wardenId], references: [id])
  users      User[]          @relation("HostelUsers")
  complaints Complaint[]
  notifications Notification[]
  events     Event[]

  @@map("hostels")
}

// Complaints table
model Complaint {
  id         String        @id @default(cuid())
  userId     String
  hostelId   String
  title      String
  description String
  category   ComplaintCategory
  status     ComplaintStatus @default(pending)
  priority   ComplaintPriority @default(medium)
  attachments String?     // JSON array of file URLs/paths
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  // Relations
  user   User   @relation(fields: [userId], references: [id])
  hostel Hostel @relation(fields: [hostelId], references: [id])

  @@map("complaints")
}

// Leave requests table
model LeaveRequest {
  id         String          @id @default(cuid())
  userId     String
  startDate  DateTime
  endDate    DateTime
  reason     String
  status     LeaveStatus     @default(pending)
  approvedBy String?
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt

  // Relations
  user       User @relation(fields: [userId], references: [id])
  approver   User? @relation("ApprovedBy", fields: [approvedBy], references: [id])

  @@map("leave_requests")
}

// Mess menu table
model MessMenu {
  id       String   @id @default(cuid())
  date     DateTime
  mealType MealType
  items    String   // Store as JSON string for MySQL compatibility
  createdAt DateTime @default(now())

  @@unique([date, mealType])
  @@map("mess_menu")
}

// Mess attendance table (for QR code tracking)
model MessAttendance {
  id          String   @id @default(cuid())
  userId      String
  date        DateTime
  mealType    MealType
  checkedInAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@unique([userId, date, mealType])
  @@map("mess_attendance")
}

// Mess feedback table
model MessFeedback {
  id        String   @id @default(cuid())
  userId    String
  date      DateTime
  mealType  MealType
  rating    Int
  comment   String?
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@map("mess_feedback")
}

// Notifications table
model Notification {
  id        String   @id @default(cuid())
  userId    String?
  hostelId  String?
  title     String
  message   String
  type      String
  read      Boolean  @default(false)
  createdBy String?
  createdAt DateTime @default(now())

  // Relations
  user   User?   @relation(fields: [userId], references: [id])
  hostel Hostel? @relation(fields: [hostelId], references: [id])
  creator User?  @relation("NotificationCreator", fields: [createdBy], references: [id])

  @@map("notifications")
}

// Events table for calendar functionality
model Event {
  id          String   @id @default(cuid())
  title       String
  description String?
  startDate   DateTime
  endDate     DateTime
  location    String?
  type        EventType @default(general)
  hostelId    String?
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  hostel     Hostel? @relation(fields: [hostelId], references: [id])
  creator    User    @relation("EventCreator", fields: [createdBy], references: [id])

  @@map("events")
}

// User preferences table for customizable dashboard
model UserPreference {
  id          String   @id @default(cuid())
  userId      String   @unique
  theme       String   @default("light")
  language    String   @default("en")
  timezone    String   @default("UTC")
  notifications String @default("{}")
  dashboardLayout String @default("{}")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@map("user_preferences")
}

// Enums
enum UserRole {
  student
  warden
  admin
}

enum ComplaintCategory {
  maintenance
  cleanliness
  security
  food
  other
}

enum ComplaintStatus {
  pending
  inProgress
  resolved
  rejected
}

enum ComplaintPriority {
  low
  medium
  high
  urgent
}

enum LeaveStatus {
  pending
  approved
  rejected
}

enum MealType {
  breakfast
  lunch
  dinner
}

enum EventType {
  general
  maintenance
  meeting
  sports
  cultural
  academic
  emergency
}
